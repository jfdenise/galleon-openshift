apiVersion: v1
kind: Template
metadata:
  name: galleon-s2i
  annotations:
    iconClass: icon-wildfly
    openshift.io/display-name: App built with Galleon S2I image
    openshift.io/provider-display-name: Red Hat, Inc.
    template.openshift.io/long-description: Provision WildFly server image using galleon and build/deploy app.
    description: Provision WildFly server image using galleon and build/deploy app.
  message: Builds created.
labels:
  template: galleon-s2i
parameters:
- name: APP_NAME
  description: The application name. Name is assigned to all of the application objects defined in this template.
  displayName: Image Name
  required: true
  value: my-galleon-s2i-app
- name: GIT_REPO
  description: The application git repository
  displayName: git repository
  required: true
  value: https://github.com/openshift/openshift-jee-sample
- name: GIT_CONTEXT_DIR
  description: The application git repository sub directory
  displayName: git repository sub directory
  required: false
  value: 
- name: GIT_BRANCH
  description: The application git branch
  displayName: git branch
  required: true
  value: master
objects:
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}-app
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}-app
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${APP_NAME}-app:latest
    runPolicy: Serial
    source:
      git:
        ref: ${GIT_BRANCH}
        uri: ${GIT_REPO}
      contextDir: ${GIT_CONTEXT_DIR}
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: s2i-wildfly-galleon:latest
          namespace: demo
      type: Source
    triggers:
    - imageChange:
      type: ImageChange
    - type: ConfigChange
    - generic:
        secret: secret101
      type: Generic
    - github:
      secret: secret101
    type: GitHub
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${APP_NAME}:latest
    source:
      dockerfile: |-
        FROM openjdk:8-jre
        COPY wildfly /wildfly
        RUN rm -rf /wildfly/standalone/configuration/standalone_xml_history/current
        RUN chmod -R 777 /wildfly/standalone
        COPY ROOT.war /wildfly/standalone/deployments
        EXPOSE 8080
        CMD ["/wildfly/bin/standalone.sh", "-b", "0.0.0.0"]
      images:
        - from: 
            kind: ImageStreamTag
            name: ${APP_NAME}-app:latest
          paths: 
          - sourcePath: /opt/wildfly
            destinationDir: "."
        - from: 
            kind: ImageStreamTag
            name: ${APP_NAME}-app:latest
          paths: 
          - sourcePath: /wildfly/standalone/deployments/ROOT.war
            destinationDir: "."
    strategy:
      dockerStrategy:
      type: Docker
    triggers:
    - type: ImageChange
      imageChange:
        from:
          kind: ImageStreamTag
          name: ${APP_NAME}-app:latest
    - type: ConfigChange
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    replicas: 1
    selector:
      app: ${APP_NAME}
      deploymentconfig: ${APP_NAME}
    strategy:
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          app: ${APP_NAME}
          deploymentconfig: ${APP_NAME}
      spec:
        containers:
        - image: ${APP_NAME}:latest
          imagePullPolicy: Always
          name: ${APP_NAME}
          ports:
          - containerPort: 8080
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          livenessProbe:
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
            timeoutSeconds: 2
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            timeoutSeconds: 2
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APP_NAME}
        from:
          kind: ImageStreamTag
          name: ${APP_NAME}:latest
      type: ImageChange
  status: {}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: ${APP_NAME}
      deploymentconfig: ${APP_NAME}
    sessionAffinity: None
    type: ClusterIP
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    name: ${APP_NAME}
    labels:
      app: ${APP_NAME}
  spec:
    to:
      kind: Service
      name: ${APP_NAME}
      weight: 100
    port:
      targetPort: 8080-tcp
    wildcardPolicy: None

